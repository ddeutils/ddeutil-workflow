wf-run-common:
  type: Workflow
  desc: |
    ## Run Python Workflow

    This is a running python workflow

  on: every_5_minute_bkk
  params:
    name: str
  jobs:
    demo-run:
      stages:
        - name: Run Hello World
          id: hello-world
          vars:
            x: ${{ params.name }}
          run: |
            print(f'Hello {x}')
            x: str = 'New Name'
        - name: Run Sequence and use var from Above
          id: run-var
          vars:
            x: ${{ stages.hello-world.outputs.x }}
          run: |
            print(f'Receive x from above with {x}')

            # Change x value
            x: int = 1
    raise-run:
      stages:
        - name: Raise Error Inside
          id: raise-error
          run: raise ValueError('Testing raise error inside PyStage!!!')
    next-run:
      stages:
        - name: Set variable and function
          run: |
            var_inside: str = 'Inside'
            def echo() -> None:
              print(f"Echo {var_inside}"
        - name: Call that variable
          run: echo()
        - name: Final of Next running job
    bash-run:
      stages:
        - name: Echo hello world
          id: echo
          bash: |
            echo "Hello World";
            VAR='Foo';
            echo "Variable $VAR";
    # WARNING:
    #   The limitation of the bash running statement is it cannot use env var
    #   calling with brace, ${ ... }, because this file was read from
    #   replacement env variable first. if you want to use it, you should escape
    #   the '$' char with '$$'.
    bash-run-env:
      stages:
        - name: Echo hello world
          id: echo-env
          env:
            PASSING: 'Bar'
          bash: |
            echo "Hello World";
            VAR='Foo';
            echo "Variable $$VAR";
            echo "ENV $$PASSING";
        - name: Raise Error inside bash
          id: raise-error
          bash: |
            printf '%s\n' "Test Raise Error case with failed" >&2;
            exit 1;


# Case:
#   Run Python statement from config value with parameters.
wf-run-python:
  type: Workflow
  params:
    author-run: str
    run-date: datetime
  jobs:
    first-job:
      stages:
        - name: Printing Information
          id: printing
          run: |
            x = '${{ params.author-run }}'
            print(f'Hello {x}')
        - name: Run Sequence and use var from Above
          id: setting-x
          vars:
            x: ${{ params.author-run }}
          run: |
            print(f'Receive x from above with {x}')
            # Change x value
            x: int = 1
    second-job:
      stages:
        - name: Set variable and function
          id: create-func
          run: |
            var_inside: str = 'Create Function Inside'
            def echo(var: str) -> None:
              print(f"Echo {var}")
            echo(var_inside)
        - name: Call that variable
          id: call-func
          vars:
            echo: ${{ stages.create-func.outputs.echo }}
          run: |
            print("Call function that create from above stage")
            echo("Call Function Outside")
        - name: Final of Next running job
    final-job:
      stages:
        - name: Echo hello world
          bash: |
            echo 'Hello World';


wf-run-python-raise:
  type: Workflow
  jobs:
    first-job:
      stages:
        - name: Raise Error Inside
          id: raise-error
          run: |
            raise ValueError('Testing raise error inside PyStage!!!')
    second-job:
      stages:
        - name: Echo hello world
          echo: "Hello World"


wf-run-python-filter:
  type: Workflow
  jobs:
    create-job:
      stages:
        - name: Create Objects
          id: create-stage
          run: |
            from enum import IntEnum

            class Rank(IntEnum):
              first: 1
              second: 2

            def check_rank(num: int) -> Rank:
              if num in Rank:
                return Rank(num)


wf-run-python-raise-for-job:
  type: Workflow
  jobs:
    first-job:
      stages:
        - name: Raise Error Inside
          id: raise-error
          run: |
            raise ValueError('Testing raise error inside PyStage!!!')
    second-job:
      stages:
        - name: Echo hello world
          echo: "Hello World"
          sleep: 3
        - name: Echo hello world 2
          echo: "Hello World 2"
    final-job:
      strategy:
        fail-fast: True
        matrix:
          name: ['foo', 'bar']
      stages:
        - name: Echo hello world
          echo: "Hello World"
          sleep: 3
        - name: Raise Error Inside
          id: raise-error
          run: |
            raise ValueError('Testing raise error inside PyStage!!!')
        - name: Echo hello world 2
          echo: "Hello World 2"
    job-stage-condition:
      stages:
        - name: Raise Error Inside
          id: equal-one
          if: ${{ matrix.sleep }} == 1
          run: |
            result: str = 'pass-condition'
        - name: Raise Error Inside
          id: not-equal-one
          if: ${{ matrix.sleep }} != 1
          run: |
            result: str = 'not-equal-1-condition'
    job-complete:
      strategy:
        fail-fast: False
        max-parallel: 2
        matrix:
          sleep: [ '0.1', '5', '1' ]
      stages:
        - name: Raise Error Inside
          id: success
          run: |
            result: str = (
              'fast-success' if ${{ matrix.sleep }} != 0.1 else 'success'
            )
    job-complete-not-parallel:
      strategy:
        fail-fast: False
        max-parallel: 1
        matrix:
          sleep: [ '0.1', '5', '1' ]
      stages:
        - name: Raise Error Inside
          id: success
          run: |
            result: str = (
              'fast-success' if ${{ matrix.sleep }} != 0.1 else 'success'
            )
    job-complete-raise:
      strategy:
        fail-fast: False
        max-parallel: 2
        matrix:
          sleep: [ '0.1', '4', '1' ]
      stages:
        - name: Sleep
          run: |
            import time
            print("Start Sleep ... ${{ matrix.sleep }}")
            time.sleep(${{ matrix.sleep }})
        - name: Raise Error Inside
          id: raise-error
          run: |
            if ${{ matrix.sleep }} != 0.1:
              raise ValueError('Testing raise error inside PyStage!!!')
            result: str = 'success'
    job-fail-fast:
      strategy:
        fail-fast: True
        max-parallel: 2
        matrix:
          sleep: [ '0.1', '5', '1' ]
      stages:
        - name: Raise Error Inside
          id: success
          run: |
            result: str = (
              'fast-success' if ${{ matrix.sleep }} != 0.1 else 'success'
            )

    job-fail-fast-raise:
      strategy:
        fail-fast: True
        max-parallel: 2
        matrix:
          sleep: [ '1', '4' ]
      stages:
        - name: Python Sleep
          run: |
            import time
            print("Start Sleep ... ${{ matrix.sleep }}")
            time.sleep(${{ matrix.sleep }})

        - name: Raise Error Inside
          id: raise-error
          run: |
            import time

            if ${{ matrix.sleep }} != 4:
              raise ValueError(
                'Testing raise error inside PyStage with the sleep not equal 4!!!'
              )
            result: str = 'success'

    job-fail-runs-on:
      runs-on:
        type: self_hosted
        with:
          host: "localhost:88"
      stages:
        - name: Echo hello world
          echo: "Hello World from Self-hosted: localhost port: 88"

wf-run-depends:
  type: Workflow
  jobs:
    first-job:
      needs: ['second-job']
      stages:
        - name: Echo next
          echo: "Wait fist job success full"
    second-job:
      stages:
        - name: Echo hello world
          echo: "Hello World"
          sleep: 2
    final-job:
      stages:
        - name: Echo final
          echo: "This job do not wait the first jon finish"


wf-without-jobs:
  type: Workflow


wf-trigger:
  type: Workflow
  on: 'every_5_minute_bkk'
  jobs:
    trigger-job:
      stages:
        - name: "Trigger wf-run-python workflow"
          trigger: wf-run-python
          id: trigger-stage
          params:
            author-run: Trigger Runner
            run-date: '2024-08-01'
