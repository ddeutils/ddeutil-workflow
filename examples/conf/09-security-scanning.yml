name: "security-scanning"
type: "Workflow"
description: "Comprehensive security scanning workflow for vulnerability assessment and compliance"

params:
  scan_type:
    type: choice
    options: ["full", "quick", "compliance"]
    desc: "Type of security scan to perform"

  target_environment:
    type: choice
    options: ["development", "staging", "production"]
    desc: "Target environment to scan"

  compliance_framework:
    type: choice
    options: ["SOC2", "PCI-DSS", "HIPAA", "ISO27001"]
    desc: "Compliance framework to check against"

jobs:
  vulnerability-scanning:
    id: "vulnerability-scanning"
    desc: "Scan for security vulnerabilities"

    runs-on:
      type: "container"
      with:
        image: "owasp/zap2docker-stable"
        environment:
          SCAN_TYPE: "${{ params.scan_type }}"
          TARGET_ENV: "${{ params.target_environment }}"
        volumes:
          - "/tmp/scan-results": "/zap/wrk"
        working_dir: "/zap/wrk"

    stages:
      - name: "Network vulnerability scan"
        bash: |
          # Run Nmap scan
          nmap -sS -sV -O --script=vuln \
               -oN /zap/wrk/nmap_scan.txt \
               ${{ params.target_hosts }}

          echo "Network vulnerability scan completed"

      - name: "Web application scan"
        run: |
          import subprocess
          import json

          # ZAP baseline scan
          target_url = "${{ params.target_url }}"

          # Run ZAP scan
          scan_cmd = [
              'zap-baseline.py',
              '-t', target_url,
              '-J', '/zap/wrk/zap_report.json',
              '-r', '/zap/wrk/zap_report.html'
          ]

          if "${{ params.scan_type }}" == "full":
              scan_cmd.extend(['-m', '10'])  # Medium threshold
          else:
              scan_cmd.extend(['-m', '20'])  # High threshold only

          result = subprocess.run(scan_cmd, capture_output=True, text=True)

          # Parse ZAP results
          with open('/zap/wrk/zap_report.json', 'r') as f:
              zap_results = json.load(f)

          # Extract vulnerabilities
          vulnerabilities = []
          for alert in zap_results.get('alerts', []):
              if alert.get('risk') in ['High', 'Medium']:
                  vulnerabilities.append({
                      'name': alert.get('name'),
                      'risk': alert.get('risk'),
                      'description': alert.get('description'),
                      'url': alert.get('url'),
                      'solution': alert.get('solution')
                  })

          # Save results
          scan_results = {
              'target_url': target_url,
              'scan_type': '${{ params.scan_type }}',
              'vulnerabilities_found': len(vulnerabilities),
              'vulnerabilities': vulnerabilities,
              'scan_timestamp': datetime.now().isoformat()
          }

          with open('/zap/wrk/web_scan_results.json', 'w') as f:
              json.dump(scan_results, f, indent=2)

          print(f"Web application scan completed: {len(vulnerabilities)} vulnerabilities found")

      - name: "Dependency vulnerability scan"
        run: |
          import subprocess
          import json
          import os

          # Scan Python dependencies
          if os.path.exists('requirements.txt'):
              subprocess.run(['safety', 'check', '-r', 'requirements.txt', '--json'],
                           stdout=open('/zap/wrk/python_vulns.json', 'w'))

          # Scan Node.js dependencies
          if os.path.exists('package.json'):
              subprocess.run(['npm', 'audit', '--json'],
                           stdout=open('/zap/wrk/node_vulns.json', 'w'))

          # Combine dependency scan results
          dependency_vulns = []

          # Parse Python vulnerabilities
          if os.path.exists('/zap/wrk/python_vulns.json'):
              with open('/zap/wrk/python_vulns.json', 'r') as f:
                  python_vulns = json.load(f)
                  for vuln in python_vulns:
                      dependency_vulns.append({
                          'package': vuln.get('package'),
                          'vulnerability': vuln.get('vulnerability'),
                          'severity': vuln.get('severity'),
                          'language': 'Python'
                      })

          # Parse Node.js vulnerabilities
          if os.path.exists('/zap/wrk/node_vulns.json'):
              with open('/zap/wrk/node_vulns.json', 'r') as f:
                  node_vulns = json.load(f)
                  for vuln in node_vulns.get('vulnerabilities', {}).values():
                      dependency_vulns.append({
                          'package': vuln.get('module_name'),
                          'vulnerability': vuln.get('title'),
                          'severity': vuln.get('severity'),
                          'language': 'Node.js'
                      })

          # Save dependency scan results
          dep_scan_results = {
              'total_vulnerabilities': len(dependency_vulns),
              'vulnerabilities': dependency_vulns,
              'scan_timestamp': datetime.now().isoformat()
          }

          with open('/zap/wrk/dependency_scan_results.json', 'w') as f:
              json.dump(dep_scan_results, f, indent=2)

          print(f"Dependency scan completed: {len(dependency_vulns)} vulnerabilities found")

  container-security-scanning:
    id: "container-security-scanning"
    desc: "Scan container images for security issues"
    needs: ["vulnerability-scanning"]

    runs-on:
      type: "container"
      with:
        image: "aquasec/trivy:latest"
        environment:
          SCAN_TYPE: "${{ params.scan_type }}"
        volumes:
          - "/tmp/container-results": "/results"
        working_dir: "/results"

    stages:
      - name: "Scan container images"
        bash: |
          # Scan all container images
          for image in ${{ params.container_images }}; do
              echo "Scanning image: $image"

              trivy image \
                --format json \
                --output /results/trivy_${image//\//_}.json \
                --severity HIGH,CRITICAL \
                $image

              trivy image \
                --format table \
                --output /results/trivy_${image//\//_}.txt \
                --severity HIGH,CRITICAL \
                $image
          done

      - name: "Analyze container scan results"
        run: |
          import json
          import glob
          import os

          container_vulns = []

          # Process all Trivy JSON reports
          for json_file in glob.glob('/results/trivy_*.json'):
              with open(json_file, 'r') as f:
                  trivy_report = json.load(f)

              image_name = trivy_report.get('ArtifactName', 'unknown')

              for vuln in trivy_report.get('Vulnerabilities', []):
                  container_vulns.append({
                      'image': image_name,
                      'package': vuln.get('PkgName'),
                      'vulnerability': vuln.get('VulnerabilityID'),
                      'severity': vuln.get('Severity'),
                      'description': vuln.get('Description'),
                      'fixed_version': vuln.get('FixedVersion')
                  })

          # Generate summary
          high_vulns = [v for v in container_vulns if v['severity'] == 'HIGH']
          critical_vulns = [v for v in container_vulns if v['severity'] == 'CRITICAL']

          container_scan_summary = {
              'total_vulnerabilities': len(container_vulns),
              'high_vulnerabilities': len(high_vulns),
              'critical_vulnerabilities': len(critical_vulns),
              'vulnerabilities': container_vulns,
              'scan_timestamp': datetime.now().isoformat()
          }

          with open('/results/container_scan_summary.json', 'w') as f:
              json.dump(container_scan_summary, f, indent=2)

          print(f"Container scan analysis completed:")
          print(f"  Total vulnerabilities: {len(container_vulns)}")
          print(f"  High severity: {len(high_vulns)}")
          print(f"  Critical severity: {len(critical_vulns)}")

  compliance-checking:
    id: "compliance-checking"
    desc: "Check compliance against security frameworks"
    needs: ["vulnerability-scanning"]

    runs-on:
      type: "local"

    stages:
      - name: "SOC2 compliance check"
        if: "${{ params.compliance_framework == 'SOC2' }}"
        run: |
          import json

          # SOC2 compliance checks
          soc2_checks = [
              {
                  'control': 'CC6.1',
                  'description': 'Logical access security software',
                  'check': 'Check for access control systems',
                  'status': 'PASS'  # Placeholder
              },
              {
                  'control': 'CC6.2',
                  'description': 'Access to system components',
                  'check': 'Verify user access controls',
                  'status': 'PASS'  # Placeholder
              },
              {
                  'control': 'CC6.3',
                  'description': 'Identification and authentication',
                  'check': 'Check authentication mechanisms',
                  'status': 'PASS'  # Placeholder
              },
              {
                  'control': 'CC6.4',
                  'description': 'Security awareness and training',
                  'check': 'Verify security training programs',
                  'status': 'PASS'  # Placeholder
              }
          ]

          soc2_results = {
              'framework': 'SOC2',
              'checks_performed': len(soc2_checks),
              'passed_checks': sum(1 for c in soc2_checks if c['status'] == 'PASS'),
              'failed_checks': sum(1 for c in soc2_checks if c['status'] == 'FAIL'),
              'compliance_score': (sum(1 for c in soc2_checks if c['status'] == 'PASS') / len(soc2_checks)) * 100,
              'checks': soc2_checks,
              'timestamp': datetime.now().isoformat()
          }

          with open('/tmp/soc2_compliance.json', 'w') as f:
              json.dump(soc2_results, f, indent=2)

          print(f"SOC2 compliance check completed: {soc2_results['compliance_score']:.1f}%")

      - name: "PCI-DSS compliance check"
        if: "${{ params.compliance_framework == 'PCI-DSS' }}"
        run: |
          import json

          # PCI-DSS compliance checks
          pci_checks = [
              {
                  'requirement': '1.1.1',
                  'description': 'Firewall configuration',
                  'check': 'Verify firewall rules',
                  'status': 'PASS'  # Placeholder
              },
              {
                  'requirement': '2.1',
                  'description': 'Vendor default accounts',
                  'check': 'Check for default passwords',
                  'status': 'PASS'  # Placeholder
              },
              {
                  'requirement': '3.4',
                  'description': 'Cardholder data protection',
                  'check': 'Verify data encryption',
                  'status': 'PASS'  # Placeholder
              },
              {
                  'requirement': '4.1',
                  'description': 'Transmission security',
                  'check': 'Check encryption in transit',
                  'status': 'PASS'  # Placeholder
              }
          ]

          pci_results = {
              'framework': 'PCI-DSS',
              'checks_performed': len(pci_checks),
              'passed_checks': sum(1 for c in pci_checks if c['status'] == 'PASS'),
              'failed_checks': sum(1 for c in pci_checks if c['status'] == 'FAIL'),
              'compliance_score': (sum(1 for c in pci_checks if c['status'] == 'PASS') / len(pci_checks)) * 100,
              'checks': pci_checks,
              'timestamp': datetime.now().isoformat()
          }

          with open('/tmp/pci_compliance.json', 'w') as f:
              json.dump(pci_results, f, indent=2)

          print(f"PCI-DSS compliance check completed: {pci_results['compliance_score']:.1f}%")

      - name: "HIPAA compliance check"
        if: "${{ params.compliance_framework == 'HIPAA' }}"
        run: |
          import json

          # HIPAA compliance checks
          hipaa_checks = [
              {
                  'rule': '164.312(a)(1)',
                  'description': 'Access control',
                  'check': 'Verify access controls',
                  'status': 'PASS'  # Placeholder
              },
              {
                  'rule': '164.312(b)',
                  'description': 'Audit controls',
                  'check': 'Check audit logging',
                  'status': 'PASS'  # Placeholder
              },
              {
                  'rule': '164.312(c)(1)',
                  'description': 'Integrity',
                  'check': 'Verify data integrity',
                  'status': 'PASS'  # Placeholder
              },
              {
                  'rule': '164.312(d)',
                  'description': 'Person or entity authentication',
                  'check': 'Check authentication',
                  'status': 'PASS'  # Placeholder
              }
          ]

          hipaa_results = {
              'framework': 'HIPAA',
              'checks_performed': len(hipaa_checks),
              'passed_checks': sum(1 for c in hipaa_checks if c['status'] == 'PASS'),
              'failed_checks': sum(1 for c in hipaa_checks if c['status'] == 'FAIL'),
              'compliance_score': (sum(1 for c in hipaa_checks if c['status'] == 'PASS') / len(hipaa_checks)) * 100,
              'checks': hipaa_checks,
              'timestamp': datetime.now().isoformat()
          }

          with open('/tmp/hipaa_compliance.json', 'w') as f:
              json.dump(hipaa_results, f, indent=2)

          print(f"HIPAA compliance check completed: {hipaa_results['compliance_score']:.1f}%")

  security-reporting:
    id: "security-reporting"
    desc: "Generate comprehensive security report"
    needs: ["compliance-checking", "container-security-scanning"]

    runs-on:
      type: "local"

    stages:
      - name: "Compile security report"
        run: |
          import json
          import os

          # Load all security scan results
          security_data = {}

          # Load vulnerability scan results
          vuln_files = [
              '/zap/wrk/web_scan_results.json',
              '/zap/wrk/dependency_scan_results.json',
              '/results/container_scan_summary.json'
          ]

          for file_path in vuln_files:
              if os.path.exists(file_path):
                  with open(file_path, 'r') as f:
                      key = os.path.basename(file_path).replace('.json', '')
                      security_data[key] = json.load(f)

          # Load compliance results
          compliance_files = [
              '/tmp/soc2_compliance.json',
              '/tmp/pci_compliance.json',
              '/tmp/hipaa_compliance.json'
          ]

          for file_path in compliance_files:
              if os.path.exists(file_path):
                  with open(file_path, 'r') as f:
                      compliance_data = json.load(f)
                      security_data[f"{compliance_data['framework'].lower()}_compliance"] = compliance_data

          # Calculate overall security score
          total_vulns = 0
          critical_vulns = 0
          high_vulns = 0

          # Count vulnerabilities from different scans
          for key, data in security_data.items():
              if 'vulnerabilities' in data:
                  for vuln in data['vulnerabilities']:
                      total_vulns += 1
                      if vuln.get('severity') == 'CRITICAL':
                          critical_vulns += 1
                      elif vuln.get('severity') == 'HIGH':
                          high_vulns += 1

          # Calculate compliance score
          compliance_scores = []
          for key, data in security_data.items():
              if 'compliance_score' in data:
                  compliance_scores.append(data['compliance_score'])

          avg_compliance = sum(compliance_scores) / len(compliance_scores) if compliance_scores else 0

          # Overall security score (weighted)
          security_score = max(0, 100 - (critical_vulns * 20) - (high_vulns * 10))
          security_score = min(100, security_score)

          # Generate summary
          security_summary = {
              'scan_type': '${{ params.scan_type }}',
              'target_environment': '${{ params.target_environment }}',
              'compliance_framework': '${{ params.compliance_framework }}',
              'total_vulnerabilities': total_vulns,
              'critical_vulnerabilities': critical_vulns,
              'high_vulnerabilities': high_vulns,
              'security_score': security_score,
              'compliance_score': avg_compliance,
              'overall_status': 'PASS' if security_score >= 80 and avg_compliance >= 90 else 'FAIL',
              'scan_timestamp': datetime.now().isoformat()
          }

          security_data['summary'] = security_summary

          # Save comprehensive report
          with open('/tmp/security_report.json', 'w') as f:
              json.dump(security_data, f, indent=2)

          print(f"Security report generated:")
          print(f"  Total vulnerabilities: {total_vulns}")
          print(f"  Critical: {critical_vulns}, High: {high_vulns}")
          print(f"  Security score: {security_score:.1f}%")
          print(f"  Compliance score: {avg_compliance:.1f}%")
          print(f"  Overall status: {security_summary['overall_status']}")

      - name: "Send security alert"
        uses: "notifications/send_slack@v1.0"
        with:
          channel: "#security-alerts"
          message: "Security scan completed: ${{ security_summary.total_vulnerabilities }} vulnerabilities, score: ${{ security_summary.security_score }}%, status: ${{ security_summary.overall_status }}"
          color: |
            "good" if "${{ security_summary.overall_status }}" == "PASS" else "danger"

      - name: "Send detailed report"
        uses: "notifications/send_email@v1.0"
        with:
          to: "security-team@company.com"
          subject: "Security Scan Report - ${{ params.target_environment }}"
          template: "security_scan_report"
          data:
            scan_type: "${{ params.scan_type }}"
            target_environment: "${{ params.target_environment }}"
            compliance_framework: "${{ params.compliance_framework }}"
            total_vulnerabilities: ${{ security_summary.total_vulnerabilities }}
            critical_vulnerabilities: ${{ security_summary.critical_vulnerabilities }}
            high_vulnerabilities: ${{ security_summary.high_vulnerabilities }}
            security_score: ${{ security_summary.security_score }}
            compliance_score: ${{ security_summary.compliance_score }}
            overall_status: "${{ security_summary.overall_status }}"

on:
  schedule:
    - cronjob: "0 2 * * 0"  # Weekly on Sunday at 2 AM
      timezone: "UTC"
